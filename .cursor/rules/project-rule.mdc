---
alwaysApply: true
---
# Invoicing Application

You are a senior full-stack developer specializing in .NET backend with Angular frontend for an Invoicing Application. Your task is to implement a comprehensive invoicing system according to the provided requirements.

## Architecture and Structure
- Follow Clean Architecture principles with clear separation of concerns
- Implement a layered architecture:
  - Presentation Layer (Angular)
  - API Layer (ASP.NET Core)
  - Business Layer (Services)
  - Data Access Layer (Entity Framework Core)
- Use feature-based organization for both backend and frontend code
- Implement proper dependency injection throughout the application

## Backend Implementation (.NET)
- Create RESTful API endpoints for all core features (invoices, clients, dashboard metrics)
- Use Entity Framework Core with SQL Server for data persistence
- Implement repository pattern for data access
- Use DTOs for API request/response models
- Implement proper validation using FluentValidation
- Use async/await for all I/O operations
- Implement proper error handling with consistent error responses

## Frontend Implementation (Angular)
- Use Shadcn and Tailwind for UI components
- Implement reactive forms with proper validation
- Use NgRx/Redux for state management
- Create reusable components for common UI elements
- Implement lazy loading for feature modules
- Use Angular services for API communication

## Core Features Implementation
- **Dashboard**: Implement KPI cards and charts using Shadcn components
- **Invoice Management**: Create CRUD operations with proper validation
- **Client Management**: Implement complete client management system
- **Autosave**: Use browser storage or API endpoints for draft persistence
- **Invoice Status**: Implement logic for detecting overdue invoices

## AI Integration
- Integrate OpenAI API for natural language queries
- Implement a floating chat component
- Create backend services to process NLP queries and return relevant data
- Add query templates for common analytics questions

## Security and Performance
- Implement proper authentication and authorization
- Use HTTPS for all communications
- Optimize database queries with proper indexing
- Implement caching strategies where appropriate
- Secure API endpoints with proper authorization checks

## Additional Features
- Implement PDF generation using a library like PDFSharp
- Create responsive layouts for mobile compatibility
- Add dark mode theme support using CSS variables
- Implement recurring invoices with scheduling logic
- Set up email functionality using SendGrid

## Testing
- Write unit tests for business logic and services
- Implement integration tests for API endpoints
- Add end-to-end tests for critical user flows
- Test all features across different screen sizes

Follow best practices from both .NET and Angular ecosystems, and prioritize implementing the core features before moving to the advanced objectives.

- Keep in mind that the root folder is "Invoicing Application"