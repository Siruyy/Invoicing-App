import { Component, OnInit } from '@angular/core';
import { CommonModule, DatePipe, CurrencyPipe } from '@angular/common';
import { ActivatedRoute, Router, RouterLink } from '@angular/router';
import { CardComponent } from '../../shared/components/card/card.component';
import { ButtonComponent } from '../../shared/components/button/button.component';
import { FormsModule } from '@angular/forms';
import { InvoiceService } from '../../core/services/invoice.service';
import { Invoice, InvoiceStatus } from '../../core/models/invoice.model';
import { Client } from '../../core/models/client.model';
import { TagModule } from 'primeng/tag';
import { ButtonModule } from 'primeng/button';
import { ConfirmDialogModule } from 'primeng/confirmdialog';
import { ConfirmationService } from 'primeng/api';
import { ToastModule } from 'primeng/toast';
import { MessageService } from 'primeng/api';
import { SafeClientPipe } from '../../shared/pipes/safe-client.pipe';
import { InputSwitchModule } from 'primeng/inputswitch';

@Component({
  selector: 'app-invoice-detail',
  standalone: true,
  imports: [
    CommonModule,
    RouterLink,
    CardComponent,
    ButtonComponent,
    TagModule,
    ButtonModule,
    ConfirmDialogModule,
    ToastModule,
    DatePipe,
    CurrencyPipe,
    SafeClientPipe,
    FormsModule,
    InputSwitchModule
  ],
  providers: [
    ConfirmationService,
    MessageService
  ],
  templateUrl: './invoice-detail.component.html',
  styleUrls: ['./invoice-detail.component.scss']
})
export class InvoiceDetailComponent implements OnInit {
  invoice: Invoice | null = null;
  loading = true;
  updating = false;
  error: string | null = null;
  
  // Expose InvoiceStatus enum to the template
  InvoiceStatus = InvoiceStatus;

  constructor(
    private invoiceService: InvoiceService,
    private route: ActivatedRoute,
    private router: Router,
    private confirmationService: ConfirmationService,
    private messageService: MessageService
  ) { }

  ngOnInit(): void {
    this.route.paramMap.subscribe(params => {
      const id = Number(params.get('id'));
      if (id) {
        this.loadInvoice(id);
      }
    });
  }

  loadInvoice(id: number): void {
    this.loading = true;
    this.error = null;
    
    this.invoiceService.getInvoiceById(id).subscribe({
      next: (invoice) => {
        this.invoice = invoice;
        this.loading = false;
      },
      error: (err) => {
        console.error('Error loading invoice', err);
        this.error = 'Unable to load invoice. Please try again later.';
        this.loading = false;
      }
    });
  }
  
  togglePaymentStatus(event: any): void {
    if (!this.invoice?.id) return;
    
    this.updating = true;
    const newStatus = event.checked ? InvoiceStatus.PAID : InvoiceStatus.PENDING;
    
    this.invoiceService.updateInvoiceStatus(this.invoice.id, newStatus).subscribe({
      next: (updatedInvoice) => {
        this.invoice = updatedInvoice;
        this.updating = false;
        this.messageService.add({
          severity: 'success',
          summary: 'Invoice Updated',
          detail: `Invoice has been marked as ${event.checked ? 'paid' : 'pending'}.`
        });
      },
      error: (err) => {
        console.error('Error updating payment status', err);
        this.updating = false;
        this.messageService.add({
          severity: 'error',
          summary: 'Error',
          detail: 'Failed to update invoice status. Please try again.'
        });
      }
    });
  }
  
  markAsPaid(): void {
    if (!this.invoice?.id) return;
    
    this.updating = true;
    this.invoiceService.markAsPaid(this.invoice.id).subscribe({
      next: (updatedInvoice) => {
        this.invoice = updatedInvoice;
        this.updating = false;
        this.messageService.add({
          severity: 'success',
          summary: 'Invoice Updated',
          detail: 'Invoice has been marked as paid successfully.'
        });
      },
      error: (err) => {
        console.error('Error marking invoice as paid', err);
        this.updating = false;
        this.messageService.add({
          severity: 'error',
          summary: 'Error',
          detail: 'Failed to mark invoice as paid. Please try again.'
        });
      }
    });
  }
  
  sendInvoice(): void {
    if (!this.invoice?.id) return;
    
    this.updating = true;
    this.invoiceService.updateInvoiceStatus(this.invoice.id, InvoiceStatus.PENDING).subscribe({
      next: (updatedInvoice) => {
        this.invoice = updatedInvoice;
        this.updating = false;
        this.messageService.add({
          severity: 'success',
          summary: 'Invoice Sent',
          detail: 'Invoice has been sent to the client.'
        });
      },
      error: (err) => {
        console.error('Error sending invoice', err);
        this.updating = false;
        this.messageService.add({
          severity: 'error',
          summary: 'Error',
          detail: 'Failed to send invoice. Please try again.'
        });
      }
    });
  }
  
  confirmDelete(): void {
    this.confirmationService.confirm({
      message: 'Are you sure you want to delete this invoice?',
      accept: () => this.deleteInvoice()
    });
  }
  
  deleteInvoice(): void {
    if (!this.invoice?.id) return;
    
    this.updating = true;
    this.invoiceService.deleteInvoice(this.invoice.id).subscribe({
      next: () => {
        this.updating = false;
        this.messageService.add({
          severity: 'success',
          summary: 'Invoice Deleted',
          detail: 'Invoice has been deleted successfully.'
        });
        // Navigate back to invoice list
        setTimeout(() => this.router.navigate(['/invoices']), 1000);
      },
      error: (err) => {
        console.error('Error deleting invoice', err);
        this.updating = false;
        this.messageService.add({
          severity: 'error',
          summary: 'Error',
          detail: 'Failed to delete invoice. Please try again.'
        });
      }
    });
  }
  
  downloadPdf(): void {
    if (!this.invoice?.id) return;
    
    this.updating = true;
    this.invoiceService.generateInvoicePdf(this.invoice.id).subscribe({
      next: (blob) => {
        // Create a download link and click it
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `invoice-${this.invoice?.invoiceNumber}.pdf`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        this.updating = false;
      },
      error: (err) => {
        console.error('Error generating PDF', err);
        this.updating = false;
        this.messageService.add({
          severity: 'error',
          summary: 'Error',
          detail: 'Failed to generate PDF. Please try again.'
        });
      }
    });
  }
  
  getStatusSeverity(status: InvoiceStatus): string {
    switch (status) {
      case InvoiceStatus.PAID:
        return 'success';
      case InvoiceStatus.PENDING:
        return 'warning';
      case InvoiceStatus.OVERDUE:
        return 'danger';
      case InvoiceStatus.DRAFT:
        return 'info';
      case InvoiceStatus.CANCELLED:
        return 'secondary';
      default:
        return 'info';
    }
  }
  
  // Helper methods to safely get client properties
  getClientName(client: Client | number | null | undefined): string {
    if (!client) return 'Unknown Client';
    if (typeof client === 'number') return `Client #${client}`;
    return client.name || 'Unknown Client';
  }
  
  getClientEmail(client: Client | number | null | undefined): string | null {
    if (!client || typeof client === 'number') return null;
    return client.email || null;
  }
  
  getClientPhone(client: Client | number | null | undefined): string | null {
    if (!client || typeof client === 'number') return null;
    return client.phone || null;
  }
  
  getClientAddress(client: Client | number | null | undefined): string | null {
    if (!client || typeof client === 'number') return null;
    
    if (client.address && typeof client.address === 'string') {
      return client.address;
    }
    
    // Build address from components
    const parts = [];
    if (client.address && typeof client.address === 'object') {
      parts.push(client.address.street);
      parts.push(client.address.city);
      if (client.address.state) parts.push(client.address.state);
      parts.push(client.address.zipCode);
      parts.push(client.address.country);
    } else {
      // Try individual fields
      if (client.city) parts.push(client.city);
      if (client.state) parts.push(client.state);
      if (client.zipCode) parts.push(client.zipCode);
      if (client.country) parts.push(client.country);
    }
    
    return parts.length > 0 ? parts.join(', ') : null;
  }
}
